#!/usr/local/bin/sbcl --script
;; -*- Mode: Lisp -*-

(eval-when (:compile-toplevel :load-toplevel :execute)
  (let ((*standard-output* (make-broadcast-stream)))
    (require 'asdf)
    (require 'gotanda)))

(in-package :got)

(defun rule-match-p (rule &optional (list (cdr sb-ext:*posix-argv*)))
  (equal rule (take (length rule) list)))

(defun split-rules (rule)
  (split-with #\/ (string-downcase rule)))

(defun argv-option-p (arg)
  (and (stringp arg)
       (not (string= arg (string-left-trim "--" arg)))))

(defun option->symbol (opt)
  (intern (string-upcase (subseq opt 2))))

(defun argv->hash (argv &optional (hash (make-hash-table)))
  (if (null argv) hash
      (destructuring-bind (key &rest rest) argv
        (multiple-value-bind (value-list rest2) (take-until #'argv-option-p rest)
          (setf (gethash (option->symbol key) hash)
                (if (cdr value-list) value-list (car value-list)))
          (argv->hash rest2 hash)))))

(defmacro dispatch (&rest rules)
  `(cond
    ,@(mapcar
       #'(lambda (rule)
           (if (eq t (car rule)) `(t ,@(cdr rule))
             (destructuring-bind (rule-symb vars &body body) rule
               (let* ((rule-list (split-rules rule-symb))
                      (rest-argv `(nthcdr ,(1+ (length rule-list)) sb-ext:*posix-argv*))
                      (arghash (gensym)))
                 `((rule-match-p ',rule-list)
                   (let* ((,arghash (argv->hash ,rest-argv))
                          ,@(mapcar
                             #'(lambda (v)
                                 `(,v (gethash ',v ,arghash))) vars))
                     ,@body))))))
       rules)))

(dispatch
  (create/task (body deadline)
    (let ((task (create-task :body body :deadline deadline)))
      (format t "New Task: ~a~%" (get-body task))))
  (list/task (tag)
    (dolist (task (list-task :tag tag))
      (format t "~a: ~a~%" (get-id task) (get-body task))))
  (t (format t "Undefined action~%")))
