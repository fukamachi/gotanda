#!/usr/bin/env sbcl --script
;; -*- Mode: Lisp -*-

(eval-when (:compile-toplevel :load-toplevel :execute)
  (let ((*standard-output* (make-broadcast-stream))
        (*error-output* (make-broadcast-stream)))
    (require 'asdf)
    (require 'gotanda)))

(in-package :got)

(defun rule-match-p (rule &optional (list (cdr sb-ext:*posix-argv*)))
  (equal rule (take (length rule) list)))

(defun split-rules (rule)
  (split-with #\/ (format nil "~(~a~)" (symbol-name rule))))

(defmacro dispatch (&rest rules)
  `(cond
    ,@(mapcar
       (lambda (rule)
         (destructuring-bind (rule-symb &body body) rule
           (if (eq t rule-symb) `(t ,body)
             (let* ((rule-list (split-rules rule-symb))
                    (rest-argv (nthcdr (length rule-list) (cdr sb-ext:*posix-argv*))))
               `((rule-match-p ',rule-list)
                 (let ((rest-argv ',rest-argv)) ,@body))))))
       rules)))

(dispatch
  (create/user (format t "~a" (apply #'got:create-user rest-argv)))
  (create/task (format t "~a" (apply #'got:create-task rest-argv)))
  (t (format t "Undefined action~%")))
