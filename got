#!/usr/local/bin/sbcl --script
;; -*- Mode: Lisp -*-

(format *terminal-io* "Loading...")
(force-output *terminal-io*)

(eval-when (:compile-toplevel :load-toplevel :execute)
  (let ((*standard-output* (make-broadcast-stream)))
    (require 'asdf)
    (require 'gotanda)))

(in-package :got)

(defun make-keyword (symb)
  (values (intern (string-upcase symb) :KEYWORD)))

(defun get-action ()
  (split-params (prompt-read "Which action?>")))

(setf (symbol-function 'dispatch)
      (alet (list-items)
            (dlambda
             (:create (&optional body deadline)
                      (let ((task (create-task :body body :deadline deadline)))
                        (format t "New Task: ~a~%" (get-body task))))
             (:list (&optional tag deadline)
                    (setf list-items
                          (list-task :tag tag
                                     :deadline (and deadline
                                                    (destructuring-bind (compare-fn datestr)
                                                        (cl-ppcre:split #\Space deadline)
                                                      (list (intern compare-fn) (str->date datestr))))))
                    (format t "~{~{~a: ~a~}~%~}" (mapcar #`(,(get-id $1) ,(get-body $1)) list-items)))
             (:edit (index &optional body deadline)
                    (edit-task index :body body :deadline deadline))
             (:action-for (n)
                          (destructuring-bind (action &rest args)
                              (or (get-action) (funcall this :action-for n))
                            (let ((action-kwd (make-keyword action)))
                              (if (member action-kwd '(:edit))
                                  (apply this action-kwd n args)
                                  (funcall this :error "Invalid action~%")))))
             (:error (form &rest args) (format t form args))
             (t (&rest args) (format t "Undefined action: ~a~%" (car args))))))

(defun run-dispatch (args)
  (if (#~m/^\d+$/ (car args)) (push :action-for args))
  (apply #'dispatch (make-keyword (car args)) (cdr args)))

(format *terminal-io* "Done.~%")

(loop for input = (prompt-read ">")
     with clsql:*default-caching* = nil
     until (zerop (length input))
     do (run-dispatch (split-params input)))
