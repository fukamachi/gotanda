#!/usr/local/bin/sbcl --script
;; -*- Mode: Lisp -*-

(format *terminal-io* "Loading...")
(force-output *terminal-io*)

(eval-when (:compile-toplevel :load-toplevel :execute)
  (let ((*standard-output* (make-broadcast-stream)))
    (require 'asdf)
    (require 'gotanda)
    (load "color")))

(in-package :got)

(defun make-keyword (symb)
  (values (intern (string-upcase symb) :KEYWORD)))

(defun get-action ()
  (split-params (prompt-read "Which action?>")))

(setf (symbol-function 'dispatch)
      (alet (list-items)
            (macrolet ((rec (&rest args) `(if (listp ,(car (last args)))
                                              (apply this ,@args)
                                              (funcall this ,@args)))
                       (get-item (idx) `(nth (- (parse-integer ,idx) 1) list-items)))
              (dlambda
               (:create (&optional body deadline)
                        (let ((task (create-task :body body :deadline deadline)))
                          (format t "New Task: ~a~%" (get-body task))))
               (:list (&optional tag deadline)
                      (setf list-items
                            (list-task :tag tag
                                       :deadline (and deadline
                                                      (destructuring-bind (compare-fn datestr)
                                                          (cl-ppcre:split #\Space deadline)
                                                        (list (intern compare-fn) (str->date datestr))))))
                      (format t "~{~{~a: ~a ~:[~;~:*[~a]~]~}~%~}"
                              (loop for task in list-items
                                 for i = 1 then (1+ i)
                                 collect `(,(color:style (:gray) i)
                                            ,(color:style (:cyan) (get-body task))
                                            ,(aand (get-deadline task)
                                                   (color:style (:gray) it))))))
               (:edit (index &optional body deadline)
                      (edit-task (get-item index) :body body :deadline deadline))
               (:delete (index)
                        (clsql:delete-instance-records (get-item index)))
               (:action-for (n)
                            (destructuring-bind (action &rest args)
                                (or (get-action) (rec :action-for n))
                              (let ((action-kwd (make-keyword action)))
                                (if (member action-kwd '(:edit :delete))
                                    (rec action-kwd n args)
                                    (rec :error "Invalid action~%")))))
               (:error (form &rest args) (format t form args))
               (t (&rest args) (format t "Undefined action: ~a~%" (car args)))))))

(defun run-dispatch (args)
  (if (#~m/^\d+$/ (car args)) (push :action-for args))
  (apply #'dispatch (make-keyword (car args)) (cdr args)))

(format *terminal-io* "Done.~%")

(loop for input = (prompt-read ">")
     with clsql:*default-caching* = nil
     until (zerop (length input))
     do (run-dispatch (split-params input)))
